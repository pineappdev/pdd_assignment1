from typing import Tuple

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import col
import argparse

from pyspark.sql.types import StructType, StructField, LongType


def parseargs() -> Tuple[str, str, str]:
    parser = argparse.ArgumentParser()

    parser.add_argument("name", choices=["linear", "doubling"], help="Algorithm version: linear or doubling")
    parser.add_argument("input_path", type=str, help="Input file path")
    parser.add_argument("output_path", type=str, help="Output file path")

    args = parser.parse_args()

    algorithm_version = args.name
    input_path = args.input_path
    output_path = args.output_path

    return algorithm_version, input_path, output_path


# 1st way - add a single edge at a time
# After each join, we keep only the shortest paths (agg min)
# We stop when there's no changes in the dataset?
# How to efficiently detect changes?

# 2nd way - join paths with themselves
# Same as above?


def update_paths(paths_df, edges_dataframe) -> pyspark.sql.DataFrame:
    paths_df = paths_df.alias('df1')
    edges_dataframe = edges_dataframe.alias('df2')
    new_paths = paths_df \
        .join(edges_dataframe, col('df1.edge_2') == col('df2.edge_1')) \
        .select(
            col("df1.edge_1").alias('edge_1'),
            col("df2.edge_2").alias('edge_2'),
            (col("df1.length") + col("df2.length")).alias("length")
        )

    return paths_df.union(new_paths).groupBy(
        "edge_1", "edge_2"
    ).agg(pyspark.sql.functions.min("length").alias("length"))

def update_paths_2(paths_df, edges_dataframe) -> pyspark.sql.DataFrame:
    paths_df = paths_df.alias('df1')
    edges_dataframe = edges_dataframe.alias('df2')
    return paths_df \
        .join(edges_dataframe, col('df1.edge_2') == col('df2.edge_1')) \
        .select(
            col("df1.edge_1").alias('edge_1'),
            col("df2.edge_2").alias('edge_2'),
            (col("df1.length") + col("df2.length")).alias("length")
        ).groupBy(
            "edge_1", "edge_2"
        ).agg(pyspark.sql.functions.min("length").alias("length"))



# TODO: checkpoint updated_paths_df before checking the changes?
# If we added edge X,X,0 to our edges then we wouldn't have to do union at all
def join_edges(edges_df, max_iter=999999):
    edges_df = edges_df.cache()
    solution_df = edges_df.selectExpr("edge_1 as edge_1", "edge_2 as edge_2", "length")
    paths_df = edges_df.selectExpr("edge_1 as edge_1", "edge_2 as edge_2", "length")
    for i in range(max_iter):
        # TODO: when to call unpersist?
        # solution_df.unpe # TODO: do we want to do that?

        # This gives us paths generated by appending 1 edge to new paths from the previous step
        updated_paths_df = update_paths_2(paths_df, edges_df)
        # Now we want to get rid of paths that are already in old df and have <= length
        # To get only new updated paths
        paths_df = updated_paths_df.alias('df1').join(
            solution_df.alias('df2'),
            on=[col('df1.edge_1') == col('df2.edge_1'), col('df1.edge_2') == col('df2.edge_2')],
            how='left'
        ) \
            .where(col('df2.length').isNull() | (col('df1.length') < col('df2.length'))) \
            .select(col('df1.edge_1').alias('edge_1'), col('df1.edge_2').alias('edge_2'),
                    col('df1.length').alias('length'))

        if paths_df.isEmpty():
            break

        # TODO: Block rdd_3_0 already exists on this machine, not re-adding it...? What?
        solution_df = solution_df \
            .union(paths_df) \
            .groupBy(
                "edge_1", "edge_2"
            ) \
            .agg(
                pyspark.sql.functions.min("length").alias("length")
            )

        # solution_df.checkpoint()

    return solution_df

def join_edges_2(edges_df, max_iter=999999):
    edges_df = edges_df.cache()
    solution_df = edges_df.selectExpr("edge_1 as edge_1", "edge_2 as edge_2", "length")
    paths_df = edges_df.selectExpr("edge_1 as edge_1", "edge_2 as edge_2", "length")
    for i in range(max_iter):
        updated_paths_df = update_paths_2(paths_df, edges_df)
        paths_df = updated_paths_df.alias('df1').join(
            solution_df.alias('df2'),
            on=[col('df1.edge_1') == col('df2.edge_1'), col('df1.edge_2') == col('df2.edge_2')],
            how='outer'
        )

        new_paths = paths_df\
            .where('df1.length IS NOT NULL AND (df2.length IS NULL OR df1.length < df2.length)') \
            .select(col('df1.edge_1').alias('edge_1'),
                        col('df1.edge_2').alias('edge_2'),
                        col('df1.length').alias('length'))

        # TODO: do we have to do checkpoints if we already have the 'isEmpty' condition here?
        if new_paths.isEmpty():
            break

        solution_df = paths_df \
            .selectExpr("COALESCE(df1.edge_1, df2.edge_1) as edge_1",
                        "COALESCE(df1.edge_2, df2.edge_2) as edge_2",
                        "least(df1.length, df2.length) as length") # TODO: least? Will it really work?

        paths_df = new_paths

    return solution_df

# TODO: cache? checkpoint? Unpersist?
# We can't do the similar approach for avoiding creating the same paths as in the edges, because
# Updating a path from X to Y means we have to join that path now with all the paths from previous version of our path dataset
# We can't just add it to only paths we updated in the step before
# So how do we avoid adding the same paths over and over again?
# Well
#
def join_paths(edges_df, max_iter=999999):
    initial_paths_df = edges_df.selectExpr("edge_1 as edge_1", "edge_2 as edge_2", "length")
    for i in range(max_iter):
        # Update paths
        updated_paths_df = update_paths(initial_paths_df, initial_paths_df)
        # Check if there are any changes in paths
        is_not_changed = updated_paths_df.selectExpr("edge_1 as edge_1", "edge_2 as edge_2", "length") \
            .exceptAll(initial_paths_df).isEmpty()
        # TODO: that exceptAll does not remove new paths with length <= old length !!!
        if is_not_changed:
            break

        # Update the paths for the next iteration
        initial_paths_df = updated_paths_df
    return initial_paths_df


def get_paths(algorithm_version: str, edges_df, output_path: str):
    if algorithm_version == 'linear':
        outcome = join_edges_2(edges_df)
    elif algorithm_version == 'doubling':
        outcome = join_paths(edges_df)
    else:
        raise Exception("provided algorithm_version {} is invalid! Choose from linear or doubling"
                        .format(algorithm_version)
                        )

    outcome.show()
    outcome.write.csv(output_path)


if __name__ == '__main__':
    algorithm_version, input_path, output_path = parseargs()
    # Initialize Spark session
    spark = SparkSession.builder \
        .master("local[*]") \
        .config("spark.executor.memory", "4g") \
        .config("spark.driver.memory", "1g") \
        .appName("mlibs") \
        .getOrCreate()

    edges_df = spark.read.csv(input_path, schema=StructType([
        StructField("edge_1", LongType(), True),
        StructField("edge_2", LongType(), True),
        StructField("length", LongType(), True)
    ]), header=True)

    get_paths(algorithm_version, edges_df, output_path)
